#include <iostream>
using namespace std;

int Queens(int m[12][12], int n, int f[12][12]);
int main()
{
	int n;
	cin >> n;
	// set the matrixes
	int m[12][12] = { {0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0} };
	int f[12][12] = { {0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0} };
	n = Queens(m, n-1, f);
	cout << n << endl;
	return 0;
}

int Queens(int m[12][12], int n, int f[12][12])
{
	int ans = 0;
	// check i column first for 1
	for (int i = n; i >= 0; i--)
	{
		// if column is safe ie no 1
		if (f[i][n] == 0)
		{	
			if (n == 1)
			{
				return 1;
			}
			// changes the board to reflect the queens position
			for (int p = 0; p <= n; p++)
			{
				m[p][n] = 1;
				m[i][n-p] = 1;
				
				if (i - p >= 0)
				{
					m[i - p][n - p] = 1;
				}
				if (i + p <= n)
				{
					m[i + p][n - p] = 1;
				}
			}
			// recursive with new updated matrix
			ans += Queens(m, n - 1, m);		}
	}
	return ans;
}

