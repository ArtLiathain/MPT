Attempt 2

#include <iostream>
using namespace std;

int Queens(int xy[12][2], int n,int tempxy[12][2]);
bool Safe(int x, int y, int xy[12][2]);
int main()
{
	int n;
	cin >> n;
	// set the matrixes
	int xy[12][2] = { {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}};
	int tempxy[12][2] = { {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}};
	n = Queens(xy, n-1, tempxy);

	cout << n << endl;

	return 0;
}

int Queens(int xy[12][2], int n,int tempxy[12][2])
{

	int ans = 0;
	// check i column first for 1
	for (int x = n; x >= 0; x--)
	{
	    cout<< x <<" x"<<endl;
	    for (int y = n; y >= 0; y--)
        {
            cout<< y << " y"<<endl;
            if(Safe(x,y,tempxy))
            {
                if (n == 1)
                {
                    cout<<"this ran"<<endl;
                    return 1;
                }
                cout<<" Before recursion"<<endl;
                xy[x][0] = 1;
                xy[y][0] = 1;
                ans += Queens(xy, n-1, xy);
            }
        }
	}
	return ans;
}

bool Safe(int x, int y, int xy[12][2])
{


		if (xy[x][0] != 0)
                {
                    cout<<" Across"<<endl;
                    return false;

                }
		if(xy[y][1] != 0)
                {
                    cout<<" Up"<<endl;
                    return false;
                }


		if (xy[x+1][0] and xy[y-1][1] != 0)
			{
			cout<<" right up"<<endl;
                    	return false;
			}
		if (xy[x-1][0] and xy[y-1][1] != 0)
			{
				    cout<<" left down"<<endl;
                    return false;
			}
                if (xy[x-1][0] and xy[y+1][1] != 0)
			{
			cout<<" left up"<<endl;
                    	return false;
			}
		if (xy[x+1][0] and xy[y+1][1] != 0)
			{
			cout<<" right down"<<endl;
                    	return false;
			}

				return true;
}









ATTEMPT 1

#include <iostream>
using namespace std;

int Queens(int m[12][12], int n, int f[12][12]);
int main()
{
	int n;
	cin >> n;
	// set the matrixes
	int m[12][12] = { {0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0} };
	int f[12][12] = { {0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0} };
	n = Queens(m, n-1, f);
	cout << n << endl;
	return 0;
}

int Queens(int m[12][12], int n, int f[12][12])
{
	int ans = 0;
	// check i column first for 1
	for (int i = n; i >= 0; i--)
	{
		// if column is safe ie no 1
		if (f[i][n] == 0)
		{	
			if (n == 1)
			{
				return 1;
			}
			// changes the board to reflect the queens position
			for (int p = 0; p <= n; p++)
			{
				m[p][n] = 1;
				m[i][n-p] = 1;
				
				if (i - p >= 0)
				{
					m[i - p][n - p] = 1;
				}
				if (i + p <= n)
				{
					m[i + p][n - p] = 1;
				}
			}
			// recursive with new updated matrix
			ans += Queens(m, n - 1, m);		}
	}
	return ans;
}

